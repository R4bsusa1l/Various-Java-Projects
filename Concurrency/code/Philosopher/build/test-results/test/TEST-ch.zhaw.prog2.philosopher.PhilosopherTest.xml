<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="ch.zhaw.prog2.philosopher.PhilosopherTest" tests="11" skipped="0" failures="0" errors="0" timestamp="2025-04-05T12:36:34" hostname="DESKTOP-0B1EKHF" time="65.26">
  <properties/>
  <testcase name="testPhilosopherTable()" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="55.112"/>
  <testcase name="First philosopher 0, then philosopher 1" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.026"/>
  <testcase name="First philosopher 1, then philosopher 0" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.016"/>
  <testcase name="First philosopher 1, then philosopher 2" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.009"/>
  <testcase name="First philosopher 2, then philosopher 1" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.012"/>
  <testcase name="First philosopher 2, then philosopher 3" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.006"/>
  <testcase name="First philosopher 3, then philosopher 2" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.008"/>
  <testcase name="First philosopher 3, then philosopher 4" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.008"/>
  <testcase name="First philosopher 4, then philosopher 3" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.005"/>
  <testcase name="First philosopher 4, then philosopher 0" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.01"/>
  <testcase name="First philosopher 0, then philosopher 4" classname="ch.zhaw.prog2.philosopher.PhilosopherTest" time="1.006"/>
  <system-out><![CDATA[Creating table (5 Philosophers, base time = 75ms )
 ...Start deadlock watchdog ...
Starting philosophers ...
Starting Philosopher 0
Starting Philosopher 1
Starting Philosopher 2
Starting Philosopher 3
Starting Philosopher 4
Stopping deadlock watchdog ...
Stopping philosophers ...
Final state: 
PhilosopherTable { running = false
  philosophers = [Philosopher { id=0, state=HUNGRY }, Philosopher { id=1, state=HUNGRY }, Philosopher { id=2, state=HUNGRY }, Philosopher { id=3, state=HUNGRY }, Philosopher { id=4, state=HUNGRY }]
  forks = [Fork { id=0, state=FREE, owner=-1 }, Fork { id=1, state=FREE, owner=-1 }, Fork { id=2, state=FREE, owner=-1 }, Fork { id=3, state=FREE, owner=-1 }, Fork { id=4, state=FREE, owner=-1 }]
}

Detected at most 1 concurrent Philosophers acquiring forks
Stopping Philosopher 4
Stopping Philosopher 3
Stopping Philosopher 0
Stopping Philosopher 1
Stopping Philosopher 2
]]></system-out>
  <system-err><![CDATA[Interrupted Philosopher { id=4, state=HUNGRY } : null
Interrupted Philosopher { id=3, state=HUNGRY } : Interrupted acquire fork 3 - sleep interrupted
Interrupted Philosopher { id=0, state=HUNGRY } : Interrupted acquire fork 0 - sleep interrupted
Interrupted Philosopher { id=1, state=HUNGRY } : Interrupted acquire fork 1 - sleep interrupted
Interrupted Philosopher { id=2, state=HUNGRY } : Interrupted acquire fork 2 - sleep interrupted
]]></system-err>
</testsuite>
